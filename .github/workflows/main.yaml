name: CI-CD pipeline for mindmap-demo

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: CI-CD
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Run Unit Tests
      # - name: Run Unit Tests
      #   run: mvn clean test

      # # Step 4: Run Integration Tests
      # - name: Run Integration Tests
      #   run: mvn failsafe:integration-test failsafe:verify

      # Step 5: Set up kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.27.0'
        id: install

      # Step 6: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 7: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 8: Build, tag, and push Docker image to Amazon ECR
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: mindmap-demo
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # # Step 9: Scan the Docker image in Amazon ECR
      # - name: Scan Docker image in ECR
      #   run: |
      #     aws ecr start-image-scan --repository-name mindmap-demo --image-id imageTag=${{ github.run_number }}

      # # Step 10: Wait for image scan results to complete
      # - name: Wait for image scan to complete
      #   run: |
      #     STATUS="IN_PROGRESS"
      #     for i in {1..10}; do
      #       STATUS=$(aws ecr describe-image-scan-findings \
      #         --repository-name mindmap-demo \
      #         --image-id imageTag=${{ github.run_number }} \
      #         --query 'imageScanStatus.status' --output text)
      #       echo "Current scan status: $STATUS"
      #       if [ "$STATUS" != "IN_PROGRESS" ]; then break; fi
      #       sleep 30
      #     done

      # # Step 11: Check the scan findings and fail the pipeline if vulnerabilities are found
      # - name: Check image scan findings
      #   run: |
      #     SCAN_FINDINGS=$(aws ecr describe-image-scan-findings \
      #       --repository-name mindmap-demo \
      #       --image-id imageTag=${{ github.run_number }} \
      #       --query 'imageScanFindings.findings' --output json)
      #     VULNERABILITIES=$(echo $SCAN_FINDINGS | jq length)
      #     if [ "$VULNERABILITIES" -gt 0 ]; then
      #       echo "Image has vulnerabilities!"
      #       echo $SCAN_FINDINGS
      #       exit 1
      #     else
      #       echo "No vulnerabilities found."
      #     fi

      # Step 12: Update kube config
      - name: Update kube config
        run: aws eks update-kubeconfig --name demo

      # Step 13: Update deployment YAML with build number
      - name: Update deployment YAML with build number
        run: |
          sed -i "s|\${BUILD_NUMBER}|${{ github.run_number }}|g" ./k8s/deployment.yaml

      # Step 14: Apply Kubernetes manifests
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f ./k8s/

      # Step 15: Wait for deployment rollout
      - name: Wait for deployment rollout status
        run: |
          kubectl rollout status deployment/k8s-demo -n default

      # Step 16: Rollback if deployment fails
      - name: Rollback to previous version if deployment fails
        if: failure()
        run: |
          kubectl rollout undo deployment/k8s-demo -n default
